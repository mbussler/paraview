<ServerManagerConfiguration>
  <ProxyGroup name="filters">
    <!-- ==================================================================== -->
    <SourceProxy name="StrainRateTensorGlyph" class="vtkStrainRateTensorGlyph" label="Strain Rate Tensor Glyph">

      <Documentation
        long_help="This filter generates an ellipsoid, cuboid, cylinder or superquadric glyph at
                   each point of the input data set. The glyphs are oriented and scaled according
                   to eigenvalues and eigenvectors of tensor point data of the input data set."
        short_help="This filter generates an ellipsoid, cuboid, cylinder or superquadric glyph at each
                   point of the input data set. The glyphs are oriented and scaled according to eigenvalues
                   and eigenvectors of tensor point data of the input data set.">

        The Tensor Glyph filter generates an ellipsoid, cuboid, cylinder or superquadric glyph at every point in
        the input data set. The glyphs are oriented and scaled according to eigenvalues and eigenvectors of tensor
        point data of the input data set. The Tensor Glyph filter operates on any type of data set. Its output is
        polygonal.
      </Documentation>

    <InputProperty
        name="Input"
        command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
      <DataTypeDomain name="input_type">
        <DataType value="vtkDataSet" />
      </DataTypeDomain>
      <InputArrayDomain name="input_array1" attribute_type="point"
            number_of_components="9" />
      <InputArrayDomain name="input_array2" attribute_type="point"
            number_of_components="1" optional="1" />
      <Documentation>
        This property specifies the input to the Glyph filter.
      </Documentation>
    </InputProperty>

    <StringVectorProperty
        name="SelectInputTensors"
        command="SetInputArrayToProcess"
        number_of_elements="5"
        element_types="0 0 0 0 2"
        label="Tensors"
        >
      <ArrayListDomain name="array_list" attribute_type="Tensors"
          input_domain_name="input_array1">
        <RequiredProperties>
          <Property name="Input" function="Input" />
        </RequiredProperties>
      </ArrayListDomain>
      <Documentation>
              This property indicates the name of the tensor array on which to operate. The indicated array's
              eigenvalues and eigenvectors are used for scaling and orienting the glyphs.
      </Documentation>
    </StringVectorProperty>

    <InputProperty
        name="Source"
        command="SetSourceConnection"
        label="Glyph Type">
      <ProxyGroupDomain name="groups">
        <Group name="sources" />
        <Group name="glyph_sources" />
      </ProxyGroupDomain>
      <DataTypeDomain name="input_type">
        <DataType value="vtkPolyData" />
      </DataTypeDomain>
      <ProxyListDomain name="proxy_list">
        <Proxy group="sources" name="SphereSource" />
        <Proxy group="sources" name="CylinderSource" />
        <Proxy group="sources" name="CubeSource" />
        <Proxy group="sources" name="SuperquadricSource" />
      </ProxyListDomain>
      <Documentation>
        This property determines which type of glyph will be placed at the points in the input dataset.
      </Documentation>
    </InputProperty>

    <StringVectorProperty
        name="SelectInputScalars"
        command="SetInputArrayToProcess"
        number_of_elements="5"
        element_types="0 0 0 0 2"
        default_values="1"
        label="Scalars"
        >
           <!-- default_values=1 is important to set here and not in Tensors
                previously. Omitting the setting here would mess up changed
                tensor input being recognized as tensor input and not as
                scalar input and vice versa. -->
      <ArrayListDomain name="array_list" attribute_type="Scalars"
          input_domain_name="input_array2">
        <RequiredProperties>
          <Property name="Input" function="Input" />
        </RequiredProperties>
      </ArrayListDomain>
      <Documentation>
        This property indicates the name of the scalar array to use for coloring
      </Documentation>
    </StringVectorProperty>

    <IntVectorProperty
        name="ColorMode"
        command="SetColorMode"
        number_of_elements="1"
        default_values="0"
        label="Color by"
        >
            <EnumerationDomain name="enum">
              <Entry value="0" text="input scalars" />
              <Entry value="1" text="eigenvalues" />
            </EnumerationDomain>
      <Documentation>
        This property determines whether input scalars or computed eigenvalues at the point should be used
        to color the glyphs. If ThreeGlyphs is set and the eigenvalues are chosen for coloring then each glyph
        is colored by the corresponding eigenvalue and if not set the color corresponding to the largest
        eigenvalue is chosen.
      </Documentation>
   </IntVectorProperty>

    <!-- Disabled as vtkStrainRateTensorGlyph.cxx does not respect this parameter currently. -->
    <!--
    <IntVectorProperty
        name="Scaling"
        command="SetScaling"
        number_of_elements="1"
        default_values="1"
        >
      <BooleanDomain name="bool" />
      <Documentation>
        This property determines whether or not to scale glyphs with eigenvalues.
      </Documentation>
    </IntVectorProperty>
    -->

    <DoubleVectorProperty
        name="ScaleFactor"
        command="SetScaleFactor"
        number_of_elements="1"
        default_values="1"
        >
      <Documentation>
        This property specifies the scale factor to scale every glyph by.
      </Documentation>
    </DoubleVectorProperty>

    <IntVectorProperty
        name="LimitScalingByEigenvalues"
        command="SetClampScaling"
        number_of_elements="1"
        default_values="0"
        >
      <BooleanDomain name="bool" />
      <Documentation>
        This property determines whether scaling of glyphs by ScaleFactor times eigenvalue should be limited.
        This is useful to prevent uncontrolled scaling near singularities.
      </Documentation>
    </IntVectorProperty>

    <DoubleVectorProperty
        name="MaxScaleFactor"
        command="SetMaxScaleFactor"
        number_of_elements="1"
        default_values="10"
        >
      <Documentation>
        If scaling by eigenvalues should be limited, this value sets an upper limit for scale factor times
        eigenvalue.
      </Documentation>
    </DoubleVectorProperty>

    <IntVectorProperty
        name="Symmetric"
        command="SetSymmetric"
        number_of_elements="1"
        default_values="0"
        >
      <BooleanDomain name="bool" />
      <Documentation>
        This property determines whether or not to draw a mirror of each glyph.
      </Documentation>
    </IntVectorProperty>

     <IntVectorProperty
        name="ThreeGlyphs"
        command="SetThreeGlyphs"
        number_of_elements="1"
        default_values="0"
        >
      <BooleanDomain name="bool" />
      <Documentation>
        Toggle whether to produce three glyphs, each of which oriented along an eigenvector and scaled according
        to the corresponding eigenvector.
      </Documentation>
          </IntVectorProperty>
    </SourceProxy>

  </ProxyGroup>
  <!-- End Filters Group -->
</ServerManagerConfiguration>
